//Recursion
class Solution {
public:
    int solve(string &word1,string &word2,int i,int j)
    {
        if(i==word1.length()){
            return word2.length()-j;
        }
        if(j==word2.length()){
            return word1.length()-i;
        }
        int ans=0;
        if(word1[i]==word2[j])
        {
            return solve(word1,word2,i+1,j+1);
        }
        else{
            int insertS=1+solve(word1,word2,i,j+1);
            int deleteS=1+solve(word1,word2,i+1,j);
            int replaceS=1+solve(word1,word2,i+1,j+1);
            ans=min(insertS,min(deleteS,replaceS));
        }
        return ans;
    }
    int minDistance(string word1, string word2) {
        
        return solve(word1,word2,0,0);
    }
};

//Dp
class Solution {
public:
    int solve(string &word1,string &word2,int i,int j,vector<vector<int>>&dp)
    {
        if(i==word1.length()){
            return word2.length()-j;
        }
        if(j==word2.length()){
            return word1.length()-i;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int ans=0;
        if(word1[i]==word2[j])
        {
            return solve(word1,word2,i+1,j+1,dp);
        }
        else{
            int insertS=1+solve(word1,word2,i,j+1,dp);
            int deleteS=1+solve(word1,word2,i+1,j,dp);
            int replaceS=1+solve(word1,word2,i+1,j+1,dp);
            ans=min(insertS,min(deleteS,replaceS));
        }
        dp[i][j]=ans;
        return dp[i][j];
    }
    int minDistance(string word1, string word2) {
        int n=word1.length(),m=word2.length();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return solve(word1,word2,0,0, dp);
    }
};
