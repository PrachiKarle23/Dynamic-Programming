//Recursion
class Solution {
public:
    int solve(vector<int>& cost,int n){
       if(n<=1){
        return cost[n];
       }

       return cost[n]+min(solve(cost,n-1),solve(cost,n-2));
    }
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        return min(solve(cost,n-1),solve(cost,n-2));
    }
};

//topdown approach

class Solution {
public:
    int solve(vector<int>& cost,int n,vector<int>& dp){
       if(n<=1){
        return cost[n];
       }
       if(dp[n]!=-1){
        return dp[n];
       }

       dp[n]= cost[n]+min(solve(cost,n-1,dp),solve(cost,n-2,dp));
       return dp[n];
    }
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        vector<int>dp(n+1,-1);
        return min(solve(cost,n-1,dp),solve(cost,n-2,dp));
    }
};

//bottom up approach

class Solution {
public:
    int solve(vector<int>& cost,int n){
       vector<int>dp(n+1,-1);

       dp[0]=cost[0];
       dp[1]=cost[1];
       
       for(int j=2;j<=n;j++)
       {
          dp[j]= cost[j]+min(dp[j-1],dp[j-2]);
       }
      
       return dp[n];
    }
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        return min(solve(cost,n-1),solve(cost,n-2));
    }
};
