//Recursion
class Solution {
public:
    int solve(vector<vector<int>>& grid,int n,int m)
    {
        if(n<0 || m<0){
            return INT_MAX;
        }
        if(n==0 && m==0){
            return grid[n][m];
        }
        
        return grid[n][m]+min(solve(grid,n-1,m),solve(grid,n,m-1));
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
        return solve(grid,n-1,m-1);
    }
};

//Dp Top down
class Solution {
public:
    int solve(vector<vector<int>>& grid,int n,int m,vector<vector<int>>& dp)
    {
        if(n<0 || m<0){
            return INT_MAX;
        }
        if(n==0 && m==0){
            return grid[n][m];
        }
        if(dp[n][m]!=-1){
            return dp[n][m];
        }
        dp[n][m]= grid[n][m]+min(solve(grid,n-1,m,dp),solve(grid,n,m-1,dp));
        return dp[n][m];
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        return solve(grid,n-1,m-1,dp);
    }
};
